# LCD_MODE = "CODE"
LCD_MODE = "TETRIS"

print("generating main/lcdNum.inl")

"""
  1
6   2
  7
5   3
  4
"""
code = [
[1,1,1,1,1,1,0],# 0
[0,1,1,0,0,0,0],
[1,1,0,1,1,0,1],
[1,1,1,1,0,0,1],
[0,1,1,0,0,1,1],# 4
[1,0,1,1,0,1,1],
[1,0,1,1,1,1,1],# 6
[1,1,1,0,0,0,0],
[1,1,1,1,1,1,1],
[1,1,1,1,0,1,1]
]

tetris_code = [
[0,0,0,0,0,0,0],#define FTE_TETROMINO_NONE 0
[0,1,1,0,0,0,0],#define FTE_TETROMINO_I 1
[0,0,1,1,1,0,1],#define FTE_TETROMINO_O 2
[0,1,1,0,0,0,1],#define FTE_TETROMINO_T 3
[0,0,1,0,0,1,1],#define FTE_TETROMINO_S 4
[0,1,0,0,1,0,1],#define FTE_TETROMINO_Z 5
[0,1,1,1,0,0,0],#define FTE_TETROMINO_J 6
[0,0,0,1,1,1,0],#define FTE_TETROMINO_L 7
[0,0,0,0,0,0,0],
[0,1,1,0,0,0,0],
]

if LCD_MODE == "TETRIS":
    code = tetris_code

intrested_addresses = set()

all_result = ""

def gen_code(fname, strs):
    """ strs is the HT1626 address of each digit segment(e.g. 32.2 means address=32, value = 1<<1) """
    pins = strs.split(' ')
    for i in range(len(pins)):
        a = pins[i].split('.')
        a[0] = int(a[0])
        a[1] = int(a[1])
        if a[0] % 2 == 1:
            a[0] -= 1
            a[1] *= 16
        pins[i] = a
    codes = []
    output = ""
    for i in range(10):
        c = {}
        for j in range(7):
            if code[i][j] == 1:
                if not pins[j][0] in c:
                    c[pins[j][0]] = pins[j][1]
                else:
                    c[pins[j][0]] += pins[j][1]
                intrested_addresses.add(pins[j][0])

        # output every c[keys]=>value
        output += f"case {i}:"
        for k in c:
            output += f"data->a_{k}|={c[k]};"
        output += "break;\n"
    result = "void lcd_data_" + fname + " (union LcdData *data, int num){ switch(num) {\n" + output + "} };\n"
    # print(result)
    global all_result
    all_result += result

tetromino_pins = [
    [54,1],[50,1],[46,1],[42,1],
           [50,2],[46,2],
           [54,2],[42,2]
    ]

def gen_tetromino(name, desc):
    """ desc is the shape of tetromino """
    c = {}
    for i in range(len(tetromino_pins)):
        if desc[i] == '1':
            if not tetromino_pins[i][0] in c:
                c[tetromino_pins[i][0]] = tetromino_pins[i][1]
            else:
                c[tetromino_pins[i][0]] += tetromino_pins[i][1]
    result = "void lcd_data_tetromino_" + name + "(union LcdData *data){"
    for k in c:
        result += f"data->a_{k}={c[k]};"
    result += "}\n"
    global all_result
    all_result += result

"""
地址位置序列
  1
6   2
  7
5   3
  4
"""

gen_code("speed","34.1 33.4 32.8 32.4 33.1 33.8 33.2")
gen_code("level","38.1 37.4 36.8 36.4 37.1 37.8 37.2")

gen_code("digit_1","53.8 53.4 45.4 41.8 45.8 49.8 49.4")
gen_code("digit_2","53.2 53.1 45.1 41.2 45.2 49.2 49.1")
gen_code("digit_3","52.8 52.4 44.4 40.8 44.8 48.8 48.4")
gen_code("digit_4","52.2 52.1 44.1 40.2 44.2 48.2 48.1")


"""
方块01信息位置序列
1 2 3 4
  5 6
  7 8
"""
gen_tetromino("I","11110000")
gen_tetromino("O","00001111")
gen_tetromino("J","00100111")
gen_tetromino("L","01001011")
gen_tetromino("T","11101000")
gen_tetromino("S","00111100")
gen_tetromino("Z","11001100")

# print(intrested_addresses)

struct_define = "union LcdData{\n"
struct_define += "struct{\n"
struct_define += "  uint8_t "

address_start = 32 # min(intrested_addresses)
address_end = 56 # max(intrested_addresses) + 2

struct_define += ','.join([f"a_{x}" for x in range(address_start, address_end, 2)])
struct_define += ";\n"
    
struct_define += "};\n"
struct_define += "uint8_t data[0];\n"
struct_define += "};\n"

struct_define += f"#define LCD_DATA_ADDR_BEGIN {address_start}\n"
struct_define += f"#define LCD_DATA_SIZE_IN_BITS {(address_end - address_start) * 4}\n"

COMMENT = """
/*********************************************/
/*        please don't edit this file        */
/* this file is auto generated by codegen.py */
/*********************************************/
"""

with open("main/lcdNum.inl", 'w') as f:
    f.write(COMMENT + struct_define + all_result)
print("over")

print("generating htmls.inl")

from glob import glob

output = ""
for f in glob("main/*.html"):
    fname = f[5:-5]
    with open(f, "r", encoding="utf8") as ff:
        ftext = ff.read().replace("\\","\\\\").replace("\n","\\n").replace("\t","\\t").replace("\"","\\\"")
        ftext = '"' + ftext + '"'
    output += f"#define HTML_{fname.upper()} {ftext}\n"
with open("main/htmls.inl","w",encoding="utf8") as f:
    f.write(output)
print("over")